@model Piranha.Areas.Manager.Models.PageEditModel
@using Piranha.Areas.Manager.Models
@{
    ViewBag.Title = "Edit page";
    ViewBag.Controller = "Page";
    ViewBag.BodyClass = "content";

    var alias = (string)TempData["AliasSuggestion"];
}

@section script {
    <script type="text/javascript">
        $(function () {
            piranha.blocks.init();
            //$("body").addClass("content");
        });

        var notificationTemplates = {
            error: {
                class: "alert-danger",
                body: '<h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Error!</h4>' +
                      '<p>The server encountered an error processing the request.</p>'
            },
            pageSavedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The page was successfully saved.</p>'
            },
            pagePublishedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The page was successfully <strong>published</strong>.</p>'
            },
            pageUnpublishedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The page was successfully <strong>unpublished</strong>.</p>'
            },
            missingTitle: {
                class: "alert-danger",
                body: '<h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Validation error!</h4>' +
                      '<p>The page could not be saved. <strong>Title</strong> is mandatory</p>'
            },
            aliasSuggestion: {
                body: '<h4 class="alert-heading"><i class="fas fa-info-circle"></i> Alias suggestion!</h4>' +
                      '<p>' +
                          'It seems you have changed the permalink of the page.<br />' +
                          'Do you want to create an <strong>Alias</strong> as suggested:<br />' +
                          'From <code>/{alias}</code> to <code>/{redirect}</code>' +
                      '</p>',
                buttons: [
                    {
                        text: "Dismiss",
                        class: "btn-primary"
                    },
                    {
                        text: "Create alias",
                        handler: function () {
                            var notis = piranha.notifications.findNotification(this);
                            piranha.notifications.dismiss(notis);

                            $("#alias-form").submit();
                        }
                    }
                ]
            },
            aliasSuggestionSuccess: {
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The alias list was updated.</p>'
            },
            aliasSuggestionSuccessWithPosts: {
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The alias list was updated.<br />' +
                        'There were also <strong>{number}</strong> {post-posts} affected by this change that was also added to the alias list.' +
                      '</p>'
            }
        };

        $("#alias-form").on("submit", function (e) {

            e.preventDefault();
            $form = $(this);

            $.ajax({
                url: $form.attr('action'),
                type: $form.attr('method'),
                data: $form.serialize(),
                dataType: 'json',
                cache: false,
                success: function (data) {

                    if (data.postAffected > 0) {
                        var templ = notificationTemplates.aliasSuggestionSuccessWithPosts;
                        templ.body = templ.body.replace("{number}", data.postAffected);
                        templ.body = templ.body.replace("{post-posts}", data.postAffected > 1 ? "posts" : "post");

                        piranha.notifications.add(piranha.notifications.create(templ), 10000);
                    } else {
                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.aliasSuggestionSuccess));
                    }
                },
                error: function () {
                    piranha.notifications.add(
                        piranha.notifications.create(
                            notificationTemplates.error));
                }
            });
        });

        $("#main-form").on("submit", function (e) {

            e.preventDefault();
            $form = $(this);

            // Copy content of all editable areas
            $form.find('.editor-area').each(function () {
                $('#' + $(this).attr('data-id')).val($(this).html());
            });

            if ($("#Title").val() === "") {
                piranha.notifications.add(
                    piranha.notifications.create(
                        notificationTemplates.missingTitle));
                return;
            }

            // Show a loading spinner during the ajax call
            var icon = document.querySelector("#main-submit i");
            icon.className = "fa fa-spinner fa-spin";

            $.ajax({
                url: $form.attr('action'),
                type: $form.attr('method'),
                data: $form.serialize(),
                dataType: 'json',
                cache: false,
                success: function (data) {
                    // If a new page, redirect to the new edit view &
                    // flag the url so we can show a notification later
                    if (window.location.pathname !== data.location) {
                        window.location.href = data.location + "#saved";
                        return;
                    }

                    if (data.aliasSuggestion) {
                        var template = notificationTemplates.aliasSuggestion;

                        template.body = template.body.replace("{alias}", data.aliasSuggestion.alias)
                        template.body = template.body.replace("{redirect}", data.aliasSuggestion.redirect)

                        $("#alias-form #siteId").val(data.aliasSuggestion.siteId);
                        $("#alias-form #pageId").val(data.aliasSuggestion.pageId);
                        $("#alias-form #alias").val(data.aliasSuggestion.alias);
                        $("#alias-form #redirect").val(data.aliasSuggestion.redirect);

                        setTimeout(function () {
                            piranha.notifications.add(piranha.notifications.create(template), 0);
                        }, 500);
                    }

                    if (data.published) {
                        $("#Published").val(data.published);
                        $("#main-submit .btn-text").text("Update");

                        $("#submit-publish").addClass("hidden");
                        $("#submit-unpublish").removeClass("hidden");

                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.pagePublishedSuccessfully));
                    } else if (data.unpublished) {
                        $("#Published").val("");
                        $("#main-submit .btn-text").text("Save draft");

                        $("#submit-unpublish").addClass("hidden");
                        $("#submit-publish").removeClass("hidden");

                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.pageUnpublishedSuccessfully));
                    } else {
                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.pageSavedSuccessfully));
                    }
                },
                error: function () {
                    piranha.notifications.add(
                        piranha.notifications.create(
                            notificationTemplates.error));
                }
            }).always(function () {
                $("form#main-form").trigger("reset-action");
                 icon.className = "fas fa-check";
            });
        });

        $(function () {
            // Check if we redirect back here from a new page creation
            if (window.location.hash === "#saved") {
                piranha.notifications.add(
                    piranha.notifications.create(
                        notificationTemplates.pageSavedSuccessfully));

                // Remove our #saved flag from the url
                history.pushState("", document.title, window.location.pathname + window.location.search);
            }
        });

        $(document).on('click', '#submit-publish', function () {
            $('form#main-form').attr('action', '@Url.Action("Publish")').submit();
        });

        $(document).on('click', '#submit-unpublish', function () {
            $('form#main-form').attr('action', '@Url.Action("UnPublish")').submit();
        });

        $(document).on('click', '#btn-settings', function () {
            $('#panel-settings').slideToggle('fast');
            return false;
        });

        $(document).on('click', '#submit-alias', function (e) {
            e.preventDefault();
            $('form#alias-form').submit();
        });

        var defaultAction = $("form#main-form").attr('action');

        $("form#main-form").on("reset-action", function () {
            if ($('form#main-form').attr('action') !== defaultAction) {
                $('form#main-form').attr('action', defaultAction);
            }
        });

        document.getElementById('Title').focus();
    </script>
}

@using (var form = Html.BeginForm("AddAlias", "Page", FormMethod.Post, new { id="alias-form", @class = "form", role = "form" })) {
    @Html.Hidden("siteId", Model.SiteId)
    @Html.Hidden("pageId", Model.Id)
    @Html.Hidden("alias", alias)
    @Html.Hidden("redirect", Model.Slug)
}

@using (var form = Html.BeginForm("Save", "Page", FormMethod.Post, new { @id = "main-form", @class = "form", @role = "form" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.OriginalPageId)
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.TypeId)
    @Html.HiddenFor(m => m.ContentType)
    @Html.HiddenFor(m => m.ParentId)
    @Html.HiddenFor(m => m.SortOrder)

    <div class="form-dimmer"></div>

    <h1 style="display:none">@ViewBag.Title</h1>

    <div class="top">
        <div class="top-nav">
            <nav>
                <ul class="navbar-nav">
                    @if (Model.Regions.Count > 0)
                    {
                        <li>
                            <div class="btn-group" role="group">
                                <button id="btnContent" type="button" class="btn btn-sm btn-labeled btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-table"></i>Regions
                                </button>
                                <div class="dropdown-menu" aria-labelledby="btnContent">
                                    @foreach (var region in Model.Regions)
                                    {
                                        <a class="dropdown-item btn-panel-region" data-toggle="panel" data-target="#region-@region.Id" href="#">@region.Id</a>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                    <li style="display:none">
                        <button id="btn-settings" type="button" class="btn btn-sm btn-primary btn-icon"  data-toggle="panel" data-target="#panelSettings">
                            <span class="fas fa-cog"></span>
                        </button>
                    </li>
                    <li>
                        <!--<div id="btnActions" class="btn-group" role="group">-->
                            <button id="main-submit" type="submit" class="btn btn-sm btn-success">
                                <i class="fas fa-check"></i>
                            </button>
                        <!--</div>-->
                    </li>
                    <li>
                        <button id="btnActions" type="button" class="btn btn-sm btn-labeled btn-primary btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-ellipsis-h"></i>
                        </button>
                        <div class="dropdown-menu" aria-labelledby="btnActions">
                            @if (Model.Id != Guid.Empty)
                            {
                                <a class="dropdown-item" href="@Url.Action("Preview", new { id = Model.Id })" target="_preview">Preview</a>
                            }
                            @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesPublish)).Succeeded)
                            {
                                if (Model.Published.HasValue)
                                {
                                    <a id="submit-unpublish" class="dropdown-item" href="#">Unpublish</a>
                                    <a id="submit-publish" class="dropdown-item hidden" href="#">Publish now</a>
                                }
                                else
                                {
                                    <a id="submit-unpublish" class="dropdown-item hidden" href="#">Unpublish</a>
                                    <a id="submit-publish" class="dropdown-item" href="#">Publish now</a>
                                }
                            }
                            <a id="btn-settings" class="dropdown-item" href="#" data-toggle="panel" data-target="#panelSettings">Settings</a>
                            @if (Model.OriginalPageId.HasValue)
                            {
                                if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesSave)).Succeeded)
                                {
                                    <hr>
                                    <a class="dropdown-item" href="@Url.Action("Detach", new { @id = Model.Id })">Detach page</a>
                                }
                            }
                            @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesDelete)).Succeeded)
                            {
                                <hr>
                                <a href="@Url.Action("Delete", new { @id = Model.Id })" class="dropdown-item confirm-delete" data-message="Are you sure you want to delete the page?"><span class="text-danger">Delete page</span></a>
                            }
                        </div>
                    </li>
                </ul>
            </nav>
        </div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">Content</li>
                <li class="breadcrumb-item"><a href="@Url.Action("List")">Pages</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit</li>
            </ol>
        </nav>
    </div>

    @if (!string.IsNullOrWhiteSpace(ViewBag.Message)) {
        <div class="row">
            <div class="col-sm-12">
                <div class="@ViewBag.MessageCss">
                    @Html.Raw(ViewBag.Message)
                </div>
            </div>
        </div>
    }

    <div class="body-content">
        <div class="form-group">
            @Html.TextBoxFor(m => m.Title, new { @class = "title", maxlength = 128, placeholder = "Your page title" })
            @Html.ValidationMessageFor(m => m.Title)
        </div>

        @if (!Model.OriginalPageId.HasValue) {
            @if (Model.PageContentType.CustomEditor)
            {
                <div id="custom-editor" class="panel-body custom-editor">
                    @Html.EditorFor(m => m, Model.PageContentType.Id)
                </div>
            }
            @if (Model.PageType.UseBlocks)
            {
                <div class="blocks">
                    <div class="unsortable">
                        <div class="block-add" style="display:none">
                            <div class="block-add-dialog">
                                @foreach (var category in Piranha.App.Blocks.GetCategories()) {
                                    var items = Piranha.App.Blocks.GetByCategory(category).Where(i => !i.IsUnlisted);

                                    <label>@category</label>
                                    @foreach (var block in items) {
                                        <a href="#" data-typename="@block.TypeName"><i class="@block.Icon"></i>@block.Name</a>
                                    }
                                }
                            </div>
                            <a href="#" class="block-add-toggle">
                                <hr><span class="fas fa-plus"></span>
                            </a>
                        </div>
                    </div>
                    @Html.EditorFor(m => m.Blocks)
                </div>
                @if (Model.Blocks.Count == 0)
                {
                    <div class="block-info content-preview unsortable">
                        <p>
                            It looks like this page doesn't have any content yet! To get started just press the
                            plus above to add your first block.
                        </p>
                    </div>
                }
            }

            <partial name="Partial/_PanelBlocks" />

            @Html.EditorFor(m => m.Regions)
        }
        else
        {
            <div class="card-header">
                <span class="title">Page copy</span>
            </div>
            <div id="page-blocks" class="card-body">
                <div class="page-blocks-body">
                    <div class="block-info content-preview">
                        <p>
                            This page is a copy and has no local content. To edit the original, click
                            <a href="@Url.Action("Edit", "Page", new { id = Model.OriginalPageId})">here</a>.
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

    <partial name="Partial/_PanelSettings" />
}
